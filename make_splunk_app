#!/bin/bash
# shellcheck disable=SC1091
#
# Build the Splunk APP
#

set -e

# https://stackoverflow.com/a/246128/315892
PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Note:  We need both Python 2.7 and 3.x at the same time.  To be compatible with Splunk's python,
#        the 'bin/' folder install with pip must be handled with 2.7 (to grab backported packages).
#        Building docs with sphinx-argparse seems to only work correctly with 3.x, so we use
#        'python3' for that part.
PY2=python2.7
PY3=python3

APP=${PROJECT_DIR}/splunk_app/ksconf
PIP_TARGET=${APP}/bin/lib
DOCS=${PROJECT_DIR}/docs
APP_DOCS=$APP/appserver/static/docs

echo "Building splunk app"
echo
echo "project dir: $PROJECT_DIR"
echo "docs home:   $DOCS"
echo "APP folder:  $APP"
echo "pip target:  $PIP_TARGET"
echo "APP docs:    $APP_DOCS"

cd "$PROJECT_DIR" || { echo "Can't find $PROJECT_DIR"; exit 1; }

# Load KSCONF_VERSION and KSCONF_BUILD; This assumes setup.py was run, causing _version.py to be generated
eval "$(cd "$PROJECT_DIR" || exit 8; $PY2 setup.py --help > /dev/null 2>&1; $PY2 -m ksconf._version)"
export KSCONF_VERSION KSCONF_BUILD

echo "VERSION:     $KSCONF_VERSION"
echo "BUILD:       $KSCONF_BUILD"

echo
echo "Build wheel"
# Make a temporary wheel just to install it with pip.  This is a work around around for Travis CI,
# where for some reasons the package get's installed as an EGG (creating .egg-info, not .dist-info)
# which causes Splunk app upgrade issues over time.
wheel_dir=$(mktemp -d)
python setup.py bdist_wheel -d "$wheel_dir"

echo
echo "Installing python package into splunk app"

if [[ -d $PIP_TARGET ]]; then echo "Clean old $PIP_TARGET"; rm -rf "$PIP_TARGET"; fi
mkdir -p "$PIP_TARGET"

echo "Installing packages...."
# Note:  We disable dependencies checking and list them explicitly.  Specifically 'lxml' gets us
#        into trouble because (1) it's OS-specific, and (2) it already ships with Splunk's python
#        so there's no need to bundle it, and (3) we DO need it for pre-commit hooks, so it has to
#        be listed as a 'install_requires' for that to work correctly.  (Although if it's missing
#        at runtime, only one command will be impacted)
#
# There is no way to simply "blacklist" a single package:  https://github.com/pypa/pip/issues/3090
$PY2 -m pip install --isolated --disable-pip-version-check --no-deps --target="$PIP_TARGET" \
    "$wheel_dir"/*.whl entrypoints splunk-sdk


# Remove all the console scripts (extra 'bin' folder) which are unusable on the target system
rm -rf "${PIP_TARGET:?}/bin"


egg_info_dirs=$(mktemp)
find "${PIP_TARGET}" -type d -name '*.egg-info' > "$egg_info_dirs"
if [[ $(wc -l < "$egg_info_dirs") -gt 0 ]]
then
    echo "Found an .egg-info file.  Old version of pip?"
    cat "$egg_info_dirs"
    exit 1
fi

# Remove version strings from ALL '.dist-info' folders to keep Splunk upgrades working.  All other approaches considered (like manifest \w custom REST cleanup script) would likely be flagged as self-deleting files may be problematic for AppInspect.  Using an REST handler upgrade for this kind of thing also means that (1) the app isn't a simple as untarring the archive, and may not work correctly on SHCs.  Sticking with the "always-overwrite-all-your-old-files" approach.
for di in "${PIP_TARGET}/"*.dist-info
do
    di_nover=$(echo "$di" | sed -E 's~^(.*/[a-zA-Z][a-zA-Z_-]+)-[0-9devrcitya-f+.]+\.dist-info~\1.dist-info~')
    mv -v "$di" "$di_nover"
done


echo "KSCONF v$KSCONF_VERSION"

(
    cd "${DOCS}" || { echo "Can't find docs."; exit 1; }
    if [[ ! -d venv ]];
    then
        echo "First time setup: Creating 'venv' with all requirements for dev"
        $PY3 -m pip install virtualenv
        $PY3 -m virtualenv venv
        . venv/bin/activate
        $PY3 -m pip install -r "$PROJECT_DIR"/requirements-doc.txt
  else
        echo "Using existing virtualenv"
        . venv/bin/activate
  fi
  # Use the classic theme (~ 1Mb output vs 11+ mb, due to web fonts)
  export KSCONF_DOCS_THEME="classic"
  echo "Making HTML docs"
  make html || { echo "Failed to make docs."; exit 2; }
  rm -rf "$APP_DOCS" || echo "No previous app docs dir"
  mkdir -p "$(dirname "$APP_DOCS")"
  echo "Copying docs into the KSCONF Splunk app"
  cp -a "$DOCS/build/html" "$APP_DOCS"
  # Splunk doesn't like any dot files.  Period.
  rm -f "$APP_DOCS/.buildinfo"
)

# Build the app.conf file.
# XXX:  the app.conf.template file should be removed from the archive
sed -E "s/\\{\\{BUILD\\}\\}/${KSCONF_BUILD}/; s/\\{\\{VERSION\\}\\}/${KSCONF_VERSION}/" "$APP/default/app.conf.template" > "$APP/default/app.conf"


# MAC OSX undocumented hack to prevent creation of '._*' folders
export COPYFILE_DISABLE=1
DIST="$PROJECT_DIR/zdist"



# Have to wait to run this cleanup as building the docs would recreate all the '.pyc' files anyways
echo "Cleaning up python compiled (.pyc) files and other banned content (Splunk packaging standards)"
find "$APP" -type f \( -name '*.py[co]' -o -name '.DS_Store' -o -name '.*.swp' \) -ls -delete
find "$APP" -type d -name '__pycache__' -ls -delete

test -d "$DIST" || mkdir "$DIST"
echo "Building Splunk app tarball"

APP_FILE=$DIST/ksconf-app_for_splunk-$KSCONF_VERSION.tgz
tar -czvf "$APP_FILE" -C "$(dirname "$APP")" "ksconf"
echo "Wrote Splunk app to $APP_FILE"


echo Cleanup
rm -rf "${wheel_dir:?}"
rm -f "$egg_info_dirs"
echo "done"
