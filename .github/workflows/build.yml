# Converted from Travis CI using https://akx.github.io/travis-to-github-actions/

name: Build python package and splunk app
on:
  push:
    tags:
      - 'v*'
    branches:
      - master
      - devel
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os:
          - ubuntu-18.04
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
        include:
          - os: ubuntu-18.04
            python-version: 3.9
            build_sdist: true
          - os: ubuntu-18.04
            python-version: 3.8
            extra_packages: argcomplete
          - os: macos-latest
            python-version: 3.7.12
    steps:
      - name: Job details
        env:
          BUILD_SDIST: ${{matrix.build_sdist}}
          EXTRA_PKGS: ${{matrix.extra_packages}}
        run: echo BUILD_SDIST=$BUILD_SDIST
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |-
            $HOME/.cache/pip
            $HOME/.pyenv
          key: '${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles(''requirements.txt'') }}'
      - uses: actions/checkout@v2

      - name: MacOS pyenv setup
        run: |
          if [ ! -e "$HOME/.pyenv/.git" ]; then
              if [ -e "$HOME/.pyenv" ]; then
                  rm -rf ~/.pyenv
              fi
              git clone https://github.com/pyenv/pyenv.git ~/.pyenv --depth 10
          else
              (cd ~/.pyenv; git pull)
          fi
          PYENV_ROOT="$HOME/.pyenv"
          PATH="$PYENV_ROOT/bin:$PATH"
          hash -r
          eval "$(pyenv init -)"
          hash -r
          pyenv install --list
          pyenv install -s $PYENV_VERSION
          pyenv rehash
          pip install wheel
          # Since pyenv can be cached across OSX builds, uninstall first for a fresh build
          if pip show kintyre-splunk-conf; then pip uninstall -y kintyre-splunk-conf; fi
        if: ${{ matrix.os == 'macOS' }}
        env:
          PYENV_VERSION: ${{matrix.python-version}}
      - name: Upgrade pip & install packaging tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      - run: pip install $EXTRA_PKGS -r requirements-ci.txt
      - name: Install ksconf python package
        run: pip install .
      - run: echo "Build $GITHUB_RUN_NUMBER BRANCH=$GITHUB_BASE_REF TAG=$GITHUB_REF"
      - run: pip list --format=columns
      - run: >
          export DO_RELEASE=True
          echo DO_RELEASE=$DO_RELEASE
        if: contains(github.ref, 'tags/v') && matrix.build_sdist == true
      - run: ksconf --version
      - run: coverage run -m unittest discover -s tests

      # - run: coverage run -a -m make_cli_docs
      - run: coverage xml

      - name: Submit to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          verbose: true

      ###############################################################
      # This isn't working for some reason....
      #   Using lcov file: ./coverage/lcov.info
      #   Error: Lcov file not found.
      # - name: Coveralls
      #
      #  uses: coverallsapp/github-action@master
      #  with:
      #      github-token: ${{ secrets.GITHUB_TOKEN }}

      ###############################################################
      #  This fails with:     requests.exceptions.HTTPError: 422 Client Error: Unprocessable Entity for url: https://coveralls.io/api/v1/jobs
      #- run: coveralls
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish ksconf to PyPI
        if: contains(github.ref, 'tags/v') && matrix.build_sdist == true
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.KSCONF_PYPI_TOKEN }}
        run: |
          echo $GITHUB_REF
          echo "::group::Pip install"
          pip install twine
          echo "::endgroup::"

          echo "::group::Run setup.py"
          python setup.py sdist bdist_wheel
          echo "::endgroup::"

          twine upload dist/ksconf-*

      - name: Build and publish kintyre-splunk-conf to PyPI
        if: contains(github.ref, 'tags/v') && matrix.build_sdist == true
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          echo "::group::Run setup_legacy.py"
          python setup_legacy.py bdist_wheel
          echo "::endgroup::"

          twine upload dist/kintyre-splunk-conf-*

      - name: Build Splunk app
        id: buildpkg
        if: matrix.build_sdist
        run: |
          python -m pip install -r requirements-doc.txt
          python splunk_app/build.py -vv
          set +x
          echo "::set-output name=path::$(cat .release_path)"
          echo "::set-output name=name::$(cat .release_name)"
        env:
          KSCONF_DEBUG: 1

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        if: contains(github.ref, 'tags/v') && matrix.build_sdist == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        id: upload-release-asset
        if: contains(github.ref, 'tags/v') && matrix.build_sdist == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.buildpkg.outputs.path }}
          asset_name: ${{ steps.buildpkg.outputs.name }}
          asset_content_type: application/tar+gzip
